---
trigger: none

pool:
  name: self-hosted

parameters:
  - name: environment
    type: string
    default: test
    displayName: Working Environment Name
    values:
      - test
      - prod

variables:
  - group: testremotebackend

stages:
# This stage installs terraform, initializes, plans and publish tfplan file. 
  - stage: Plan
    jobs:
      - job: tfinstall
        displayName: Terraform Install
        steps:
          - task: TerraformInstaller@1
            displayName: Terraform Install
            inputs:
              terraformVersion: 1.12.2

      - job: tfplan
        displayName: Terraform Plan
        dependsOn: tfinstall
        steps:
          # terraform init
          - task: TerraformTask@5
            inputs:
              provider: azurerm
              command: init
              workingDirectory: '$(System.DefaultWorkingDirectory)/envs/${{ parameters.environment }}/'
              backendAzureRmUseEntraIdForAuthentication: false
              backendServiceArm: '$(serviceconnection)'
              backendAzureRmResourceGroupName: '$(backendresourcegroup)'
              backendAzureRmStorageAccountName: '$(storageaccountname)'
              backendAzureRmContainerName: '$(containername)'
              backendAzureRmKey: '$(filename)'
              
          # terraform validate
          - task: TerraformTask@5
            inputs:
              provider: azurerm
              command: validate
              workingDirectory: '$(System.DefaultWorkingDirectory)/envs/${{ parameters.environment }}/'
          - script: |
              echo "Resolved working directory: $(System.DefaultWorkingDirectory)/envs/${{ parameters.environment }}/"
          # terraform plan
          - task: TerraformTask@5
            inputs:
              provider: azurerm
              command: plan
              workingDirectory: '$(System.DefaultWorkingDirectory)/envs/${{ parameters.environment }}/'
              commandOptions: -var-file="testvariables.tfvars" -out=planoutput.tfplan
              environmentServiceNameAzureRM: '$(serviceconnection)'
          # Publish the tfplan artifact
          - task: PublishPipelineArtifact@1
            displayName: Publishing tfplan
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/envs/${{ parameters.environment }}/planoutput.tfplan'
              artifact: testplan
              publishLocation: pipeline

# This stage dowloads the tfplan file and applies it.
  - stage: Apply
    dependsOn: Plan
    condition: succeeded()
    jobs:
      - job: tfinstall
        displayName: Terraform Install
        steps:
          - task: TerraformInstaller@1
            displayName: Terraform Install
            inputs:
              terraformVersion: 1.12.2

      - job: tfapply
        displayName: Terraform Apply
        steps:
          # Download tfplan artifact
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: current
              artifactName: testplan
              targetPath: '$(Pipeline.Workspace)/testplan'

          # terraform init
          - task: TerraformTask@5
            inputs:
              provider: azurerm
              command: init
              workingDirectory: '$(System.DefaultWorkingDirectory)/envs/${{ parameters.environment }}/'
              backendAzureRmUseEntraIdForAuthentication: false
              backendServiceArm: '$(serviceconnection)'
              backendAzureRmResourceGroupName: '$(backendresourcegroup)'
              backendAzureRmStorageAccountName: '$(storageaccountname)'
              backendAzureRmContainerName: '$(containername)'
              backendAzureRmKey: '$(filename)'
          # terraform apply
          - task: TerraformTask@5
            inputs:
              provider: azurerm
              command: apply
              workingDirectory: '$(Pipeline.Workspace)/testplan'
              commandOptions: 'planoutput.tfplan -auto-approve'
              environmentServiceNameAzureRM: '$(serviceconnection)'
