trigger:
  none

pool:
  name: 'self-hosted'

parameters:
  - name: environment
    type: string
    default: test
    displayName: 'Working Environment Name'
    values:
      - test
      - prod

stages:
  - stage: "testvalidation"
    jobs:
      - job: tfValidate
        steps:
          - task: TerraformInstaller@1
            displayName: 'Terraform Install'
            inputs:
              terraformVersion: '1.12.2'
          - script: |
              terraform init
              terraform validate
            workingDirectory: "envs/${{ parameters.environment }}"
            env:
              ARM_SUBSCRIPTION_ID: $(TESTSUBSCRIPTIONID)
            displayName: 'Terraform Validate'
      - job: tfPlan
        displayName: 'Terraform Plan'
        steps:
          - script: |
              terraform init
              terraform plan -var-file="testvariables.tfvars" -out=tfplan
            workingDirectory: "envs/${{ parameters.environment }}"
          # Setting the environment variable for the subscription ID
            env:
              ARM_SUBSCRIPTION_ID: $(TESTSUBSCRIPTIONID)
          # Publishing the Terraform plan as an artifact
          - publish: "envs/${{ parameters.environment }}/tfplan"
            artifact: testplanfile
            
  - stage: "testdeployment"
    dependsOn: "testvalidation"
    condition: and(succeeded(), eq('${{ parameters.environment }}', 'test'))
    jobs:
      - job: tfApply
        displayName: 'Downloading the plan artifact and applying it'
        steps:
          - download: current
            artifact: testplanfile        
          - script: |
              terraform init
              terraform apply "tfplan" -auto-approve
            workingDirectory: "envs/${{ parameters.environment }}"
            env:
              ARM_SUBSCRIPTION_ID: $(TESTSUBSCRIPTIONID)
            displayName: 'Terraform Apply'


