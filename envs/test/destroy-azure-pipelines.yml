---
trigger: none

pool:
  name: self-hosted

parameters:
  - name: environment
    type: string
    default: test
    displayName: Working Environment Name
    values:
      - test
      - prod

variables:
  - group: testremotebackend

stages:
# This stage installs terraform, initializes, plans and publish tfplan file. 
  - stage: Plan
    jobs:
      - job: tfinstall
        displayName: Terraform Install
        steps:
          - task: TerraformInstaller@1
            displayName: Terraform Install
            inputs:
              terraformVersion: 1.12.2

      - job: tfdestroy
        displayName: Terraform Destroy
        dependsOn: tfinstall
        steps:
          # terraform init
          - task: TerraformTask@5
            inputs:
              provider: azurerm
              command: init
              workingDirectory: '$(System.DefaultWorkingDirectory)/envs/${{ parameters.environment }}/'
              backendAzureRmUseEntraIdForAuthentication: false
              backendServiceArm: '$(serviceconnection)'
              backendAzureRmResourceGroupName: '$(backendresourcegroup)'
              backendAzureRmStorageAccountName: '$(storageaccountname)'
              backendAzureRmContainerName: '$(containername)'
              backendAzureRmKey: '$(filename)'
              
          # terraform validate
          - task: TerraformTask@5
            inputs:
              provider: azurerm
              command: validate
              workingDirectory: '$(System.DefaultWorkingDirectory)/envs/${{ parameters.environment }}/'
          - script: |
              echo "Resolved working directory: $(System.DefaultWorkingDirectory)/envs/${{ parameters.environment }}/"
          # terraform plan
          - task: TerraformTask@5
            inputs:
              provider: azurerm
              command: plan
              workingDirectory: '$(System.DefaultWorkingDirectory)/envs/${{ parameters.environment }}/'
              commandOptions: '-destroy -var-file="testvariables.tfvars" -out=destroyplan.tfplan'
              environmentServiceNameAzureRM: '$(serviceconnection)'
          # terraform destroy
          - task: TerraformTask@5
            inputs:
              provider: azurerm
              command: destroy
              workingDirectory: '$(System.DefaultWorkingDirectory)/envs/${{ parameters.environment }}/'
              commandOptions: '-auto-approve "destroyplan.tfplan"'
              environmentServiceNameAzureRM: '$(serviceconnection)'