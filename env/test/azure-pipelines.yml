trigger:
  none

pool:
  name: 'self-hosted'

parameters:
  - name: environment
    type: string
    default: test
    displayName: 'Working Environment Name'
    values:
      - test
      - prod

stages:
  - stage: Plan
    jobs:
      - job: tfinstall
        displayName: 'Terraform Install'
        steps:
          - task: TerraformInstaller@1
            displayName: 'Terraform Install'
            inputs:
              terraformVersion: '1.12.2'
      - job: tfinit
        displayName: 'Terraform Initialize'
        dependsOn: tfinstall
        steps:
          - task: TerraformTask@5
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/envs/${{ parameters.environment }}'
              backendAzureRmUseEntraIdForAuthentication: false
              backendServiceArm: 'test-ado-connection'
              backendAzureRmResourceGroupName: 'test-tfremote'
              backendAzureRmStorageAccountName: 'tfteststorage000'
              backendAzureRmContainerName: 'tftestcontainer000'
              backendAzureRmKey: 'testterraform.tfstate'
          - task: TerraformTask@5
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/envs/${{ parameters.environment }}'
      - job: tfplan
        displayName: 'Terraform Plan'
        dependsOn: tfinit
        steps:
          - task: TerraformTask@5
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/envs/${{ parameters.environment }}'
              commandOptions: '-var-file="testvariables.tfvars" -out=testplan'
              environmentServiceNameAzureRM: 'test-ado-connection'
          - task: PublishPipelineArtifact@1
            displayName: 'Publishing tfplan'
            inputs:
              targetPath: '$(Pipeline.Workspace)/envs/${{ parameters.environment }}'
              artifact: 'testplan'
              publishLocation: 'pipeline'
  - stage: Apply
    dependsOn: Plan
    condition: succeeded()
    jobs:
      - job: tfinstall
        displayName: 'Terraform Install'
        steps:
          - task: TerraformInstaller@1
            displayName: 'Terraform Install'
            inputs:
              terraformVersion: '1.12.2'
      - job: tfinit2
        displayName: 'Terraform Initialize'
        steps:
          - task: TerraformTask@5
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/envs/${{ parameters.environment }}'
              backendAzureRmUseEntraIdForAuthentication: false
              backendServiceArm: 'test-ado-connection'
              backendAzureRmResourceGroupName: 'test-tfremote'
              backendAzureRmStorageAccountName: 'tfteststorage000'
              backendAzureRmContainerName: 'tftestcontainer000'
              backendAzureRmKey: 'testterraform.tfstate' 
      - job: DownloadArtifact
        displayName: 'Download tfplan'
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'testplan'
              targetPath: '$(Pipeline.Workspace)/envs/${{ parameters.environment }}'
      - job: tfapply
        displayName: 'Terraform Apply'
        dependsOn: tfinit2
        steps:
          - task: TerraformTask@5
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/envs/${{ parameters.environment }}'
              commandOptions: 'tfplan -auto-approve'
              environmentServiceNameAzureRM: 'test-ado-connection'
          
          
          


